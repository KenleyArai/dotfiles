call plug#begin('~/.vim/plugged')

" Sensible defaults
Plug 'tpope/vim-sensible'
Plug 'rstacruz/vim-opinion'

" colors
Plug 'altercation/vim-colors-solarized'
Plug 'junegunn/rainbow_parentheses.vim'

" movement
Plug 'Lokaltog/vim-easymotion'
Plug 'kien/ctrlp.vim'
Plug 'bkad/CamelCaseMotion'

" git
Plug 'airblade/vim-gitgutter'

" visual
Plug 'edkolev/promptline.vim'
Plug 'bling/vim-airline'
Plug 'Yggdroot/indentLine'
Plug 'myusuf3/numbers.vim'

" editing
Plug 'tpope/vim-surround'
Plug 'jiangmiao/auto-pairs'
Plug 'scrooloose/syntastic'
Plug 'tomtom/tcomment_vim'
Plug 'Shougo/neocomplete.vim'
Plug 'Shougo/neosnippet.vim'
Plug 'Shougo/neosnippet-snippets'

" Markdown
Plug 'suan/vim-instant-markdown'
Plug 'plasticboy/vim-markdown'
Plug 'gabrielelana/vim-markdown'
Plug 'pprovost/vim-markdown-jekyll'

" Python
Plug 'hdima/python-syntax'

" Haskell
Plug 'vim-scripts/haskell.vim'
Plug 'eagletmt/neco-ghc'
Plug 'eagletmt/ghcmod-vim'
Plug 'Twinside/vim-haskellConceal'
Plug 'Shougo/vimproc.vim'

" tmux
Plug 'christoomey/vim-tmux-navigator'
Plug 'edkolev/tmuxline.vim'

call plug#end()

"-------------Non-Plugin settings-----------

set nocompatible
filetype plugin indent on

" colors and fonts
set background=dark
colorscheme solarized

"Movement between screens
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

augroup CursorLine
  au!
  au VimEnter,WinEnter,BufWinEnter * setlocal cursorline
  au WinLeave * setlocal nocursorline
augroup END

"Delete extra whitespace
autocmd BufWritePre * %s/\s\+$//e

"Return cursor to previous position on load
autocmd BufReadPost * normal `""`

autocmd BufWritePost *.hs GhcModCheckAndLintAsync

"No annoying flashing
set visualbell t_vb=

"-------------Plugin settings------------
"----sensible
runtime! plugin/sensible.vim
runtime! plugin/opinion.vim

noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>
noremap h <NOP>
noremap j <NOP>
noremap k <NOP>
noremap l <NOP>

" overwriting opinion/sensible defaults
set mouse=""      " disable mouse
set foldnestmax=1 " fold only 1 deep
set noshowmode    " noshow for lightline
set tabstop=4                   "A tab is 8 spaces
set expandtab                   "Always uses spaces instead of tabs
set softtabstop=4               "Insert 4 spaces when tab is pressed
set shiftwidth=4                "An indent is 4 spaces
set shiftround                  "Round indent to nearest shiftwidth multiple
"
"Setting leader
let mapleader=","

"Changing movement to be like emacs
map <C-e> $
map <C-a> ^
imap <C-e> <ESC>$a
imap <C-a> <ESC>^i

"Adding newlines without entering insert mode
nmap O O<Esc>
nmap o o<Esc>k

" Sign Column made by solarized color is strange, clear it.
 highlight clear SignColumn
" " vim-gitgutter will use Sign Column to set its color, reload it.
 call gitgutter#highlight#define_highlights()"

"----Indenline
let g:indentLine_char = 'Â¦'

"----Neocomplete
let g:neocomplete#enable_at_startup = 1
"
" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return neocomplete#close_popup() . "\<CR>"
  " For no inserting <CR> key.
  "return pumvisible() ? neocomplete#close_popup() : "\<CR>"
endfunction
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><C-y>  neocomplete#close_popup()
inoremap <expr><C-e>  neocomplete#cancel_popup()

" AutoComplPop like behavior.
let g:neocomplete#enable_auto_select = 1

" SuperTab like snippets behavior.
imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)"
\: pumvisible() ? "\<C-n>" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)"
\: "\<TAB>"

" For snippet_complete marker.
if has('conceal')
  set conceallevel=2 concealcursor=i
endif

"----Easymotion
" Disable default mapping
let g:EasyMotion_do_mapping = 0
let g:EasyMotion_smartcase = 1

map  / <Plug>(easymotion-sn)
omap / <Plug>(easymotion-tn)
map  n <Plug>(easymotion-next)
map  N <Plug>(easymotion-prev)
nmap s <Plug>(easymotion-s)

map <Leader>l <Plug>(easymotion-lineforward)
map <Leader>j <Plug>(easymotion-j)
map <Leader>k <Plug>(easymotion-k)
map <Leader>h <Plug>(easymotion-linebackward)

let g:EasyMotion_startofline = 0

"----Syntastic
let g:syntastic_cpp_check_header     = 1
let g:syntastic_cpp_compiler         = 'g++'
let g:syntastic_cpp_compiler_options = '-std=c++11'

"----Surround
vmap <Leader>{ S{
vmap <Leader>( S(
vmap <Leader>" S"
vmap <Leader>' S'

"----tcomment"
vmap <Leader>c :TComment<CR>
nmap <Leader>c :TComment<CR>

"----CtrlP
set runtimepath^=~/.vim/bundle/ctrlp.vim

"----tmuxline
let g:tmuxline_preset = {'a'    : '#W',
                        \'c'    : '#H',
                        \'win'  : '#W',
                        \'cwin' : '#W',
                        \'x'    : '%a',
                        \'y'    : '#W %R',
                        \'z'    : '#H'}

"----Airline
let g:airline_powerline_fonts = 1

"----promptline
let g:promptline_theme = 'airline'
"----Rainbow Paren
au VimEnter * RainbowParentheses
let g:rainbow#pairs = [['(', ')'], ['[', ']'], ['{', '}'], ['"', '"']]
let g:rainbow#max_level = 16
