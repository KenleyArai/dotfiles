call plug#begin('~/.vim/plugged')

" Sensible defaults
Plug 'tpope/vim-sensible'
Plug 'rstacruz/vim-opinion'

" colors
Plug 'altercation/vim-colors-solarized'
Plug 'junegunn/rainbow_parentheses.vim'

" movement
Plug 'Lokaltog/vim-easymotion'
Plug 'MattesGroeger/vim-bookmarks'
Plug 'kien/ctrlp.vim'

" git
Plug 'airblade/vim-gitgutter'
Plug 'mattn/gist-vim'
Plug 'mattn/webapi-vim'
Plug 'tpope/vim-fugitive'

" visual
Plug 'edkolev/promptline.vim'
Plug 'bling/vim-airline'
Plug 'bling/vim-bufferline'

" editing
Plug 'terryma/vim-multiple-cursors'
Plug 'tpope/vim-surround'
Plug 'jiangmiao/auto-pairs'
Plug 'scrooloose/syntastic'
Plug 'tomtom/tcomment_vim'
Plug 'ervandew/supertab'
Plug 'Rip-Rip/clang_complete'
Plug 'Shougo/neocomplcache.vim'
Plug 'sjl/gundo.vim'
Plug 'junegunn/vim-easy-align'
Plug 'davidhalter/jedi-vim'

" tmux
Plug 'christoomey/vim-tmux-navigator'
Plug 'edkolev/tmuxline.vim'

call plug#end()

"-------------Non-Plugin settings-----------

set nocompatible
filetype plugin indent on

" colors and fonts
set background=light
colorscheme solarized
set guifont=Inconsolata\ for\ powerline:h1
let g:solarized_visibility="high"

" I like append but soooo used to I
nmap i a

augroup CursorLine
  au!
  au VimEnter,WinEnter,BufWinEnter * setlocal cursorline
  au WinLeave * setlocal nocursorline
augroup END

"Setting leader
let mapleader=","

" don't yank newline
nmap yy ^y$

"Clipboard copying and pasting
vmap <Leader>y "+y
vmap <Leader>d "+d
nmap <Leader>p "+P
nmap <Leader>P "+p
vmap <Leader>p "+P
vmap <Leader>P "+p

set undofile                " Save undo's after file closes
set undodir=$HOME/.vim/undo " where to save undo histories
set undolevels=1000         " How many undos
set undoreload=10000        " number of lines to save for undo

"Changing movement to be like emacs
map <C-e> $
map <C-a> ^
imap <C-e> <ESC>$a
imap <C-a> <ESC>^i

"Moving down a single line even if wrapped
nnoremap j gj
nnoremap k gk

"Adding newlines without entering insert mode
nmap O O<Esc>
nmap o o<Esc>k

"Movement between screens
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

"Delete extra whitespace
autocmd BufWritePre * %s/\s\+$//e

"Return cursor to previous position on load
autocmd BufReadPost * normal `""`

"No annoying flashing
set visualbell t_vb=

"-------------Plugin settings------------
"----sensible
runtime! plugin/sensible.vim
runtime! plugin/opinion.vim

" overwriting opinion/sensible defaults
set mouse=""      " disable mouse
set foldnestmax=1 " fold only 1 deep
set noshowmode    " noshow for lightline
set so=999        " keeping cursor in center of the screen
set nohlsearch

"----Easymotion
let g:EasyMotion_do_mapping = 0
let g:EasyMotion_smartcase = 1

map  / <Plug>(easymotion-sn)
omap / <Plug>(easymotion-tn)
map  n <Plug>(easymotion-next)
map  N <Plug>(easymotion-prev)
nmap s <Plug>(easymotion-s)

map <Leader>l <Plug>(easymotion-lineforward)
map <Leader>j <Plug>(easymotion-j)
map <Leader>k <Plug>(easymotion-k)
map <Leader>h <Plug>(easymotion-linebackward)

let g:EasyMotion_startofline = 0

"----Syntastic
let g:syntastic_cpp_check_header     = 1
let g:syntastic_cpp_compiler         = 'g++'
let g:syntastic_cpp_compiler_options = '-std=c++11'

"----Multi-Cursor
" Map start key separately from next key
let g:multi_cursor_use_default_mapping=0
let g:multi_cursor_next_key='<C-n>'
let g:multi_cursor_prev_key='<C-p>'
let g:multi_cursor_skip_key='<C-x>'
let g:multi_cursor_quit_key='<Esc>'

" Called once right before you start selecting multiple cursors
function! Multiple_cursors_before()
  if exists(':NeoCompleteLock')==2
    exe 'NeoCompleteLock'
  endif
endfunction

" Called once only when the multiple selection is canceled (default <Esc>)
function! Multiple_cursors_after()
  if exists(':NeoCompleteUnlock')==2
    exe 'NeoCompleteUnlock'
  endif
endfunction

"----Surround
vmap <Leader>{ S{
vmap <Leader>( S(
vmap <Leader>" S"
vmap <Leader>' S'

"----tcomment"
vmap <Leader>c :TComment<CR>
nmap <Leader>c :TComment<CR>

"----ClangComplete
let g:clang_use_library=1
let g:clang_library_path='/usr/lib/libclang'

"----Neocompletecache
let g:neocomplcache_enable_at_startup = 1
let g:neocomplcache_enable_smart_case = 1
let g:neocomplcache_disable_auto_complete = 1

if !exists('g:neocomplcache_force_omni_patterns')
  let g:neocomplcache_force_omni_patterns = {}
endif
let g:neocomplcache_force_overwrite_completefunc = 1
let g:neocomplcache_force_omni_patterns.c =
      \ '[^.[:digit:] *\t]\%(\.\|->\)'
let g:neocomplcache_force_omni_patterns.cpp =
      \ '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'

let g:clang_complete_auto = 1
let g:clang_auto_select = 0

"----Supertab

"----CtrlP
set runtimepath^=~/.vim/bundle/ctrlp.vim

"----tmuxline
let g:tmuxline_preset = {'a'    : '#W',
                        \'c'    : '#H',
                        \'win'  : '#W',
                        \'cwin' : '#W',
                        \'x'    : '%a',
                        \'y'    : '#W %R',
                        \'z'    : '#H'}

"----Airline
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1

"----promptline
let g:promptline_theme = 'airline'
let g:promptline_preset = {'a' : [ promptline#slices#host()  ],
                          \'b' : [ promptline#slices#user()  ],
                          \'y' : [ promptline#slices#vcs_branch()  ],
                          \'warn' : [ promptline#slices#last_exit_code()]}

"----Gundo
" toggle gundo
nnoremap <leader>u :GundoToggle<CR>

"----Rainbow Paren
au VimEnter * RainbowParentheses
let g:rainbow#pairs = [['(', ')'], ['[', ']']]

"----Easy-Align
vmap <Enter> <Plug>(EasyAlign)

"----jedi
autocmd FileType python setlocal completeopt-=preview
